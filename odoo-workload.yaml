apiVersion: apps/v1
kind: Deployment
metadata:
  name: odoo
spec:
  selector:
    matchLabels:
      app: odoo
  template:
    metadata:
      labels:
        app: odoo
    spec:
      containers:
      - image: odoo:latest #registry.gitlab.com/dhruvikmevada/docker-images:13.0
        name: odoo
        imagePullPolicy: IfNotPresent
        # command:
        #   - "/bin/sh"
        # args:
        #   - "-c"
        #   - "chmod 777 -R /var/lib/odoo"
        # command: ["sh", "-c", "chmod -R 777 /var/lib/odoo"]
        args:
          - "--database=http_test"
          - "--db-filter=http_test"
          # - "--proxy-mod    e"
          # - "--proxy_mode=True"
        env:
        - name: POSTGRES_HOST
          value: postgres
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: postgres
        - name: POSTGRES_USER
          value: odoo
        - name: POSTGRES_PASSWORD
          value: odoo
        securityContext:
          privileged: true
          runAsUser: 101
          # fsGroup: 101
        ports:
         - containerPort: 8069
        volumeMounts:
        - mountPath: "/var/lib/odoo"
          name: efs
      # restartPolicy: OnFailure
        resources:
          requests:
            cpu: 500m

      volumes:
        - name: efs
          persistentVolumeClaim:
            claimName: efs

---
apiVersion: v1
kind: Service
metadata:
  name: odoo-sv
  labels:
    app: odoo
  annotations:
  #   #external-dns.alpha.kubernetes.io/hostname=flectrahq.in
  #   # Note that the backend talks over HTTP.
  #   # service.beta.kubernetes.io/aws-load-balancer-type: nlb
      # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
  #   # # TODO: Fill in with the ARN of your certificate.
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:472773279465:certificate/94134560-dc80-4d30-a976-1ebc04fa7cc7
  #   # # Only run SSL on the port named "https" below.
      # service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
      # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  selector:
    app: odoo
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8069
  type: LoadBalancer
  selector:
   app: odoo
#   # externalTrafficPolicy: Cluster
#
# # arn:aws:acm:us-west-2:472773279465:certificate/a8bd2d99-3eaa-4575-a1d5-7440e951cfab

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: flectra
# spec:
#   selector:
#     matchLabels:
#       app: flectra
#   template:
#     metadata:
#       labels:
#         app: flectra
#     spec:
#       containers:
#       - image: flectrahq/flectra:latest #registry.gitlab.com/dhruvikmevada/docker-images:13.0
#         name: flectra
#         imagePullPolicy: IfNotPresent
#         # command:
#         #   - "/bin/sh"
#         # args:
#         #   - "-c"
#         #   - "chmod 777 -R /var/lib/odoo"
#         # command: ["sh", "-c", "chmod -R 777 /var/lib/odoo"]
#         args:
#           # - "--database=http_test"
#           # - "--proxy-mod    e"
#           # - "--proxy_mode=True"
#         env:
#         - name: POSTGRES_HOST
#           value: postgres
#         - name: POSTGRES_PORT
#           value: "5432"
#         - name: POSTGRES_DB
#           value: postgres
#         - name: POSTGRES_USER
#           value: flectra
#         - name: POSTGRES_PASSWORD
#           value: flectra
#         securityContext:
#           privileged: true
#           # runAsUser: 101
#           # fsGroup: 101
#         ports:
#          - containerPort: 7073
#         volumeMounts:
#         - mountPath: "/var/lib/flectra"
#           name: efs
#       # restartPolicy: OnFailure
#       volumes:
#         - name: efs
#           persistentVolumeClaim:
#             claimName: efs
#
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: flectra-sv
#   labels:
#     app: flectra
#   # annotations:
#   #   #external-dns.alpha.kubernetes.io/hostname=flectrahq.in
#   #   # Note that the backend talks over HTTP.
#   #   # service.beta.kubernetes.io/aws-load-balancer-type: nlb
#   #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
#   #   # # TODO: Fill in with the ARN of your certificate.
#   #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:472773279465:certificate/94134560-dc80-4d30-a976-1ebc04fa7cc7
#   #   # # Only run SSL on the port named "https" below.
#   #   service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
#   #   # nginx.ingress.kubernetes.io/force-ssl-redirect: "tru  e"
# spec:
#   selector:
#     app: flectra
#   ports:
#   - name: http
#     protocol: TCP
#     port: 80
#     targetPort: 7073
#   type: LoadBalancer
#   selector:
#    app: flectra
  # externalTrafficPolicy: Cluster

# arn:aws:acm:us-west-2:472773279465:certificate/a8bd2d99-3eaa-4575-a1d5-7440e951cfab
